import streamlit as st
import numpy as np  # ‚úÖ Ajout n√©cessaire
from components.api_client import api
from components.client_form import render_client_form
from components.risk_interpretation_simple import explain_score_for_advisor, create_score_gauge, explain_financial_ratios
from components.rgpd_compliance import show_rgpd_consent, show_privacy_notice, RGPDCompliantSession, validate_data_minimization

# Configuration
st.set_page_config(
    page_title="Neo-Bank Credit Dashboard",
    page_icon="üè¶",
    layout="wide"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f4e79 0%, #2563eb 100%);
        padding: 1.5rem; 
        border-radius: 15px; 
        color: white; 
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #e5e7eb;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .success-box {
        background: #f0fdf4;
        border: 1px solid #bbf7d0;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .sidebar .sidebar-content {
        background: #f8fafc;
    }
    
    /* Am√©liorer l'apparence des formulaires */
    .stNumberInput > div > div > input {
        border-radius: 8px;
    }
    
    .stSelectbox > div > div > select {
        border-radius: 8px;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # Initialisation de session RGPD
    RGPDCompliantSession.initialize_session()
    
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>Neo-Bank Credit Dashboard</h1>
        <p>√âvaluation instantan√©e de cr√©dit pour conseillers client√®le</p>
    </div>
    """, unsafe_allow_html=True)
    
    # V√©rification du moteur de scoring int√©gr√©
    api_ok, api_info = api.health_check()
    
    if not api_ok:
        st.error("Moteur de scoring non disponible - Erreur de chargement du mod√®le")
        st.info("Solutions possibles :\n- V√©rifiez que le fichier model/credit_model_v2.pkl existe\n- Red√©marrez l'application\n- Contactez le support technique")
        
        # Affichage des d√©tails d'erreur
        if 'error' in api_info:
            st.error(f"D√©tail de l'erreur : {api_info['error']}")
        
        st.stop()
    
    # Sidebar - √âtat du moteur int√©gr√©
    st.sidebar.success("Moteur de scoring actif")
    st.sidebar.info(f"Version : {api_info.get('version', 'N/A')}")
    st.sidebar.info(f"Mod√®le : {'Charg√©' if api_info.get('model_loaded') else 'Non charg√©'}")
    st.sidebar.info(f"Features : {api_info.get('feature_count', 0)}")
    st.sidebar.info(f"RGPD : {'Actif' if api_info.get('rgpd_enabled') else 'Inactif'}")
    st.sidebar.success("H√©berg√© sur Streamlit Cloud")
    
    # Navigation simplifi√©e
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Navigation")
    page = st.sidebar.radio(
        "Choisir une action :", 
        ["√âvaluer un Client", "Guide d'utilisation"],
        index=0
    )
    
    # PAGE PRINCIPALE : Scoring Client
    if page == "√âvaluer un Client":
        st.header("√âvaluation de Demande de Cr√©dit")
        
        # Consentement RGPD obligatoire
        if not show_rgpd_consent():
            st.stop()
        
        # Instructions rapides
        with st.expander("üí° Instructions rapides", expanded=False):
            st.markdown("""
            **Comment utiliser ce dashboard :**
            1. üìù Remplissez les informations du client dans le formulaire
            2. üéØ Cliquez sur "√âvaluer le Client"
            3. üìä Consultez le score de risque et les recommandations
            4. üíº Prenez votre d√©cision en toute confiance
            """)
        
        st.markdown("---")
        
        # Formulaire principal - Utilise vos composants existants
        client_data = render_client_form()
        
        # Traitement du r√©sultat
        if client_data:
            # Validation et minimisation RGPD
            minimized_data = validate_data_minimization(client_data)
            
            with st.spinner('üîÑ **√âvaluation en cours...** Analyse des 14 param√®tres du mod√®le'):
                success, result = api.score_client(minimized_data)
            
            if success:
                # Animation de succ√®s
                st.success("‚úÖ **√âvaluation termin√©e avec succ√®s !**")
                
                st.markdown("---")
                st.markdown("## üìà R√©sultats de l'√âvaluation")
                
                # ‚úÖ Gestion s√©curis√©e de l'affichage
                try:
                    # Affichage intelligent pour conseiller
                    explain_score_for_advisor(result)
                    
                    st.markdown("---")
                    
                    # Graphiques c√¥te √† c√¥te
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("### üéØ Score Visuel")
                        fig_gauge = create_score_gauge(result.get('risk_score', 0))
                        st.plotly_chart(fig_gauge, use_container_width=True)
                    
                    with col2:
                        # ‚úÖ V√©rification avant d'appeler explain_financial_ratios
                        if 'details' in result and result['details']:
                            explain_financial_ratios(result['details'])
                        else:
                            st.warning("‚ö†Ô∏è D√©tails financiers non disponibles dans la r√©ponse API")
                            st.info("Les calculs de ratios seront affich√©s une fois que l'API retourne tous les d√©tails")
                    
                    # Section d√©tails techniques (repliable)
                    with st.expander("üîß D√©tails techniques et donn√©es brutes", expanded=False):
                        col_tech1, col_tech2 = st.columns(2)
                        
                        with col_tech1:
                            st.markdown("**Donn√©es client (minimis√©es RGPD) :**")
                            st.json(minimized_data)
                        
                        with col_tech2:
                            st.markdown("**R√©ponse compl√®te de l'API :**")
                            st.json(result)
                
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'affichage des r√©sultats: {str(e)}")
                    st.info("üí° Les donn√©es sont disponibles mais il y a un probl√®me d'affichage")
                    
                    # Affichage de base en cas d'erreur
                    st.json(result)

                # Actions sugg√©r√©es
                st.markdown("---")
                st.markdown("### üéØ Actions Suivantes")
                
                risk_score = result['risk_score']
                
                if risk_score < 35:
                    st.success("‚úÖ **Dossier √† approuver** - Risque faible, vous pouvez proc√©der en confiance.")
                    st.info("üí° **Conseil :** Pr√©parez les documents de financement pour ce client.")
                elif risk_score < 65:
                    st.warning("‚ö†Ô∏è **Dossier √† √©tudier** - Analyse compl√©mentaire recommand√©e.")
                    st.info("üí° **Conseil :** Demandez des garanties suppl√©mentaires ou justificatifs.")
                else:
                    st.error("‚ùå **Dossier √† risque** - Refus recommand√© ou conditions tr√®s strictes.")
                    st.info("üí° **Conseil :** Proposez des alternatives de financement ou orientez vers un autre produit.")
                
            else:
                st.error(f"‚ùå **Erreur lors de l'√©valuation :** {result.get('error', 'Erreur inconnue')}")
                st.info("üîß **Solutions :**\n- V√©rifiez que l'API est d√©marr√©e\n- Contr√¥lez que tous les champs sont remplis\n- Contactez le support technique")
    
    # PAGE SECONDAIRE : Guide d'utilisation
    elif page == "Guide d'utilisation":
        st.header("Guide d'Utilisation du Dashboard")
        
        st.markdown("### Objectif")
        st.info("Ce dashboard permet d'√©valuer en temps r√©el le risque de d√©faut d'un client pour une demande de cr√©dit.")
        
        st.markdown("### Comment interpr√©ter les scores")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üü¢ Score 0-20% : TR√àS FAIBLE**
            - ‚úÖ Approuver sans h√©sitation
            - Client excellent, risque minimal
            
            **üîµ Score 20-35% : FAIBLE**  
            - ‚úÖ Approuver le dossier
            - Bon profil client
            
            **üü° Score 35-50% : MOD√âR√â**
            - ‚ö†Ô∏è Approuver avec surveillance
            - Profil acceptable √† surveiller
            """)
        
        with col2:
            st.markdown("""
            **üü† Score 50-65% : √âLEV√â**
            - üîç Analyse approfondie requise
            - Profil √† risque, √©tudier attentivement
            
            **üî¥ Score 65-80% : TR√àS √âLEV√â**
            - ‚ùå Risque tr√®s important
            - Refus recommand√©
            
            **‚ö´ Score 80%+ : CRITIQUE**
            - ‚ùå Refuser le dossier
            - Risque de d√©faut extr√™me
            """)
        
        st.markdown("### üí∞ Ratios Financiers Importants")
        
        st.markdown("""
        **üìä Ratio Cr√©dit/Revenus :**
        - üü¢ < 3x : Excellent (cr√©dit raisonnable)
        - üü° 3-5x : Correct (acceptable mais surveiller)  
        - üî¥ > 5x : √âlev√© (cr√©dit tr√®s important vs revenus)
        
        **üìà Taux d'Endettement :**
        - üü¢ < 33% : Conforme aux standards bancaires
        - üü° 33-50% : Limite haute acceptable
        - üî¥ > 50% : Dangereux pour le client
        """)
        
        st.markdown("### üîí Conformit√© RGPD")
        st.success("‚úÖ **Ce dashboard respecte le RGPD :**")
        st.markdown("""
        - üö´ **Aucun stockage** des donn√©es clients
        - ‚ö° **Traitement en temps r√©el** uniquement
        - üîê **Moteur int√©gr√© s√©curis√©** sans API externe
        - üìù **Logs anonymis√©s** pour le monitoring
        - üéØ **Minimisation des donn√©es** automatique
        - üõ°Ô∏è **Consentement utilisateur** obligatoire
        """)
        
        # Notice de confidentialit√©
        show_privacy_notice()
        
        st.markdown("### üÜò Support Technique")
        st.info("""
        **En cas de probl√®me :**
        1. üîÑ Rechargez la page
        2. üîå V√©rifiez que l'API est d√©marr√©e (`docker-compose up`)
        3. üìû Contactez l'√©quipe technique avec le code d'erreur
        """)

if __name__ == "__main__":
    main()